from ictester.part import (PackageDIP16, Pin, PinType)
from ictester.test import TestLogic

class Part74169(PackageDIP16):
    name = "74169"
    desc = "Synchronous 4-bit up/down binary counter"
    pin_cfg = {
        1: Pin("U/~D", PinType.IN),
        2: Pin("CLK", PinType.IN),
        3: Pin("A", PinType.IN),
        4: Pin("B", PinType.IN),
        5: Pin("C", PinType.IN),
        6: Pin("D", PinType.IN),
        7: Pin("~ENP", PinType.IN),
        9: Pin("~LOAD", PinType.IN),
        10: Pin("~ENT", PinType.IN),
        11: Pin("QD", PinType.OUT),
        12: Pin("QC", PinType.OUT),
        13: Pin("QB", PinType.OUT),
        14: Pin("QA", PinType.OUT),
        15: Pin("~RCO", PinType.OUT),
    }

    # ~load, u/~d, ~ent, ~enp, clk, a-d
    default_inputs = [9,  1,  10, 7,  2,  3, 4, 5, 6]
    default_outputs = [14, 13, 12, 11,  15]

    test_load = TestLogic("Load", default_inputs, default_outputs,
        body=[
            [[0,  0,  1, 1,  '/',  0, 0, 0, 0], [0, 0, 0, 0,  1]],
            [[0,  0,  1, 1,  '/',  1, 0, 0, 0], [1, 0, 0, 0,  1]],
            [[0,  0,  1, 1,  '/',  0, 1, 0, 0], [0, 1, 0, 0,  1]],
            [[0,  0,  1, 1,  '/',  1, 1, 0, 0], [1, 1, 0, 0,  1]],
            [[0,  0,  1, 1,  '/',  0, 0, 1, 0], [0, 0, 1, 0,  1]],
            [[0,  0,  1, 1,  '/',  1, 0, 1, 0], [1, 0, 1, 0,  1]],
            [[0,  0,  1, 1,  '/',  0, 1, 1, 0], [0, 1, 1, 0,  1]],
            [[0,  0,  1, 1,  '/',  1, 1, 1, 0], [1, 1, 1, 0,  1]],
            [[0,  0,  1, 1,  '/',  0, 0, 0, 1], [0, 0, 0, 1,  1]],
            [[0,  0,  1, 1,  '/',  1, 0, 0, 1], [1, 0, 0, 1,  1]],
            [[0,  0,  1, 1,  '/',  0, 1, 0, 1], [0, 1, 0, 1,  1]],
            [[0,  0,  1, 1,  '/',  1, 1, 0, 1], [1, 1, 0, 1,  1]],
            [[0,  0,  1, 1,  '/',  0, 0, 1, 1], [0, 0, 1, 1,  1]],
            [[0,  0,  1, 1,  '/',  1, 0, 1, 1], [1, 0, 1, 1,  1]],
            [[0,  0,  1, 1,  '/',  0, 1, 1, 1], [0, 1, 1, 1,  1]],
            [[0,  0,  1, 1,  '/',  1, 1, 1, 1], [1, 1, 1, 1,  1]],
        ]
    )

    test_count = TestLogic("Count up/down", default_inputs, default_outputs,
        body=[
            # load 0
            [[0,  0,  1, 1,  '/',  0, 0, 0, 0], [0, 0, 0, 0,  1]],
            # count up
            [[1,  1,  0, 0,  '/',  0, 0, 0, 0], [1, 0, 0, 0,  1]],
            [[1,  1,  0, 0,  '/',  0, 0, 0, 0], [0, 1, 0, 0,  1]],
            [[1,  1,  0, 0,  '/',  0, 0, 0, 0], [1, 1, 0, 0,  1]],
            [[1,  1,  0, 0,  '/',  0, 0, 0, 0], [0, 0, 1, 0,  1]],
            [[1,  1,  0, 0,  '/',  0, 0, 0, 0], [1, 0, 1, 0,  1]],
            [[1,  1,  0, 0,  '/',  0, 0, 0, 0], [0, 1, 1, 0,  1]],
            [[1,  1,  0, 0,  '/',  0, 0, 0, 0], [1, 1, 1, 0,  1]],
            [[1,  1,  0, 0,  '/',  0, 0, 0, 0], [0, 0, 0, 1,  1]],
            [[1,  1,  0, 0,  '/',  0, 0, 0, 0], [1, 0, 0, 1,  1]],
            [[1,  1,  0, 0,  '/',  0, 0, 0, 0], [0, 1, 0, 1,  1]],
            [[1,  1,  0, 0,  '/',  0, 0, 0, 0], [1, 1, 0, 1,  1]],
            [[1,  1,  0, 0,  '/',  0, 0, 0, 0], [0, 0, 1, 1,  1]],
            [[1,  1,  0, 0,  '/',  0, 0, 0, 0], [1, 0, 1, 1,  1]],
            [[1,  1,  0, 0,  '/',  0, 0, 0, 0], [0, 1, 1, 1,  1]],
            [[1,  1,  0, 0,  '/',  0, 0, 0, 0], [1, 1, 1, 1,  0]],
            [[1,  1,  0, 0,  '/',  0, 0, 0, 0], [0, 0, 0, 0,  1]],
            # count down
            [[1,  0,  0, 0,  '/',  0, 0, 0, 0], [1, 1, 1, 1,  1]],
            [[1,  0,  0, 0,  '/',  0, 0, 0, 0], [0, 1, 1, 1,  1]],
            [[1,  0,  0, 0,  '/',  0, 0, 0, 0], [1, 0, 1, 1,  1]],
            [[1,  0,  0, 0,  '/',  0, 0, 0, 0], [0, 0, 1, 1,  1]],
            [[1,  0,  0, 0,  '/',  0, 0, 0, 0], [1, 1, 0, 1,  1]],
            [[1,  0,  0, 0,  '/',  0, 0, 0, 0], [0, 1, 0, 1,  1]],
            [[1,  0,  0, 0,  '/',  0, 0, 0, 0], [1, 0, 0, 1,  1]],
            [[1,  0,  0, 0,  '/',  0, 0, 0, 0], [0, 0, 0, 1,  1]],
            [[1,  0,  0, 0,  '/',  0, 0, 0, 0], [1, 1, 1, 0,  1]],
            [[1,  0,  0, 0,  '/',  0, 0, 0, 0], [0, 1, 1, 0,  1]],
            [[1,  0,  0, 0,  '/',  0, 0, 0, 0], [1, 0, 1, 0,  1]],
            [[1,  0,  0, 0,  '/',  0, 0, 0, 0], [0, 0, 1, 0,  1]],
            [[1,  0,  0, 0,  '/',  0, 0, 0, 0], [1, 1, 0, 0,  1]],
            [[1,  0,  0, 0,  '/',  0, 0, 0, 0], [0, 1, 0, 0,  1]],
            [[1,  0,  0, 0,  '/',  0, 0, 0, 0], [1, 0, 0, 0,  1]],
            [[1,  0,  0, 0,  '/',  0, 0, 0, 0], [0, 0, 0, 0,  0]],
            [[1,  0,  0, 0,  '/',  0, 0, 0, 0], [1, 1, 1, 1,  1]],
        ]
    )

    test_inhibit = TestLogic("Inhibit", default_inputs, default_outputs,
        body=[
            # load 0
            [[0,  0,  1, 1,  '/',  0, 0, 0, 0], [0, 0, 0, 0,  1]],
            # count up with inhibit
            [[1,  1,  1, 1,  '/',  0, 0, 0, 0], [0, 0, 0, 0,  1]],
            [[1,  1,  0, 1,  '/',  0, 0, 0, 0], [0, 0, 0, 0,  1]],
            [[1,  1,  1, 0,  '/',  0, 0, 0, 0], [0, 0, 0, 0,  1]],
            # count down with inhibit
            [[1,  0,  1, 1,  '/',  0, 0, 0, 0], [0, 0, 0, 0,  1]],
            [[1,  0,  0, 1,  '/',  0, 0, 0, 0], [0, 0, 0, 0,  0]],
            [[1,  0,  1, 0,  '/',  0, 0, 0, 0], [0, 0, 0, 0,  1]],
        ]
    )
 
    tests = [test_load, test_count, test_inhibit]
